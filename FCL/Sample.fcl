FUNCTION_BLOCK calculate

// Define input variables
VAR_INPUT
    directFlight : REAL;
    distance : REAL;
    costDifference: REAL;
    totalTravelTime : REAL;
    superFastTrains : REAL;
    scheduleAlignment : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    rfci : REAL;
END_VAR

// Fuzzify input variable 'directFlight'
FUZZIFY directFlight
    TERM low := (0, 1) (4, 0) ; 
    TERM average := (3, 0) (6,1) (9,1) (11,0);
    TERM high := (10, 0) (13, 1);
END_FUZZIFY

// Fuzzify input variable 'distance'
FUZZIFY distance
    TERM low := (0, 1) (20, 0) ; 
    TERM average := (18, 0) (25,1) (30,1) (35,0);
    TERM high := (33, 0) (40, 1) (50, 1);
END_FUZZIFY

// Fuzzify input variable 'costDifference'
FUZZIFY costDifference
    TERM low := (0, 1) (500, 0) ; 
    TERM average := (450, 0) (1000,1) (1200,1) (1400,0);
    TERM high := (1300, 0) (1500, 1) (4500, 1);
END_FUZZIFY

// Fuzzify input variable 'totalTravelTime'
FUZZIFY totalTravelTime
    TERM low := (0, 1) (4, 0) ; 
    TERM average := (1, 0) (4,1) (6,1) (9,0);
    TERM high := (6, 0) (9, 1);
END_FUZZIFY

// Fuzzify input variable 'superFastTrains'
FUZZIFY superFastTrains
    TERM low := (0, 1) (10, 0) ; 
    TERM average := (9, 0) (13,1) (20,1) (23,0);
    TERM high := (22, 0) (25, 1) (40,1);
END_FUZZIFY

// Fuzzify input variable 'scheduleAlignment'
FUZZIFY scheduleAlignment
    TERM low := (0, 1) (5, 0) ; 
    TERM average := (4, 0) (7,1) (9,1) (11,0);
    TERM high := (10, 0) (15, 1) (35,1);
END_FUZZIFY


// Defuzzify output variable 'RFCI'
DEFUZZIFY rfci
    
    TERM bad := (0,0) (0.2, 1) (0.4,0); 
    TERM average := (0.3,0) (0.6,1) (0.8,0);
    TERM good := (0.7, 0) (0.9, 1) (1,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF distance IS high AND superFastTrains IS high 
              THEN rfci IS average;

    RULE 2 : IF costDifference IS high OR superFastTrains IS high OR directFlight IS low OR scheduleAlignment IS high OR totalTravelTime IS high   
                 THEN rfci IS good; 

    RULE 3 : IF distance IS high OR costDifference IS low OR superFastTrains IS low OR directFlight IS high OR scheduleAlignment IS low OR totalTravelTime IS low   
                 THEN rfci IS bad;

	RULE 4 : IF totalTravelTime IS average AND distance IS NOT high
              THEN rfci IS average;
    
	RULE 5 : IF costDifference IS average AND distance IS NOT high
              THEN rfci IS average;
             
	RULE 6 : IF superFastTrains IS average AND distance IS NOT high
              THEN rfci IS average;
              
	RULE 7 : IF directFlight IS average AND distance IS NOT high
              THEN rfci IS average;
              
	RULE 8 : IF scheduleAlignment IS average AND distance IS NOT high
              THEN rfci IS average;
	
END_RULEBLOCK

END_FUNCTION_BLOCK
